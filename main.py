import json
import requests
import telebot
import datetime
import time


class WeatherBot:
    def __init__(self, bot_token, openweathermap_api_key):
        self.bot = telebot.TeleBot(bot_token)
        self.API = openweathermap_api_key

        # –ø–µ—Ä–µ–≤–æ–¥
        with open('weather_data.json', 'r', encoding='utf-8') as json_file:
            self.weather_mapping = json.load(json_file)

        self.city_weather_data = {}
        self.last_city = None
        self.scheduled_message = None

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
        self.subscribed_users = {}

        # –ê—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
        self.sending_weather = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.markup.add(telebot.types.KeyboardButton("–ü—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å"))
        # self.markup.add(telebot.types.KeyboardButton("–°—Ç–æ–ø"))
        self.markup.add(telebot.types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è"))
        self.markup.add(telebot.types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))

        @self.bot.message_handler(commands=['start'])
        def start(message):
            self.bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

        @self.bot.message_handler(func=lambda message: message.text.lower() == "–∑–∞–≤—Ç—Ä–∞")
        def get_weather_tomorrow(message):
            if self.last_city:
                tomorrow_weather_info = self.get_weather_for_date(self.last_city,
                                                                  datetime.datetime.now() + datetime.timedelta(days=1))
                if tomorrow_weather_info:
                    self.bot.send_message(message.chat.id, tomorrow_weather_info, reply_markup=self.markup)
                else:
                    self.bot.send_message(message.chat.id,
                                          f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è {self.last_city}... ü•∫')
            else:
                self.bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.')

        # –ø–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è
        @self.bot.message_handler(func=lambda message: message.text.lower() == "–ø–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è")
        def get_weather_three_days(message):
            if self.last_city:
                city = self.last_city
                current_date = datetime.datetime.now()
                tomorrow_date = current_date + datetime.timedelta(days=1)
                day_after_tomorrow_date = current_date + datetime.timedelta(days=2)
                third_day_date = current_date + datetime.timedelta(days=3)

                tomorrow_weather_info = self.get_weather_for_date(city, tomorrow_date)
                day_after_tomorrow_weather_info = self.get_weather_for_date(city, day_after_tomorrow_date)
                third_day_weather_info = self.get_weather_for_date(city, third_day_date)

                if tomorrow_weather_info and day_after_tomorrow_weather_info and third_day_weather_info:
                    weather_info = (f'üèôÔ∏è–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()}:\n\n'
                                    f'üìÖ–ó–∞–≤—Ç—Ä–∞:\n'
                                    f'{tomorrow_weather_info}\n\n'
                                    f'üìÖ–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞:\n'
                                    f'{day_after_tomorrow_weather_info}\n\n'
                                    f'üìÖ–ß–µ—Ä–µ–∑ 3 –¥–Ω—è:\n'
                                    f'{third_day_weather_info}\n')

                    self.bot.send_message(message.chat.id, weather_info, reply_markup=self.markup)
                else:
                    self.bot.send_message(message.chat.id,
                                          f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –¥–ª—è {city}... ü•∫')
            else:
                self.bot.send_message(message.chat.id, '–í—ã –µ—â–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥.')

        # —Ä–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å1
        @self.bot.message_handler(func=lambda message: True)
        def handle_city(message):
            if message.text.lower() == "—Å—Ç–æ–ø":
                if self.sending_weather:
                    self.sending_weather = False
                    if message.chat.id in self.subscribed_users:
                        self.subscribed_users[message.chat.id] = False
                    # –∫–ª–∞–≤–∞
                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(telebot.types.KeyboardButton("–ü—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å"))
                    markup.add(telebot.types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è"))
                    markup.add(telebot.types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))
                    self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=markup)
                else:
                    self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            elif message.text.lower() == "–ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å":
                if self.sending_weather:
                    self.bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
                else:
                    self.sending_weather = True
                    # –£–±–µ—Ä–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏—Å—ã–ª–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å" –∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"
                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.add(telebot.types.KeyboardButton("–°—Ç–æ–ø"))
                    markup.add(telebot.types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ 3 –¥–Ω—è"))
                    markup.add(telebot.types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞"))
                    self.bot.send_message(message.chat.id,
                                          "–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã –∑–∞–ø—É—â–µ–Ω–∞. –ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å.",
                                          reply_markup=markup)
                    self.subscribed_users[message.chat.id] = True
                    self.send_weather_periodically(message.chat.id)
            else:
                self.last_city = message.text.lower()
                self.send_weather(message.chat.id, self.last_city)

    # –æ–±—â–∞—è –ø–æ–≥–¥–∞ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)
    def get_weather_for_date(self, city, date):
        res = requests.get(f'https://api.openweathermap.org/data/2.5/forecast?q={city}&appid={self.API}&units=metric')

        if res.status_code == 200:
            data = json.loads(res.text)

            for weather_data in data["list"]:
                forecast_datetime = datetime.datetime.utcfromtimestamp(weather_data["dt"])

                if forecast_datetime.date() == date.date():
                    weather_description_en = weather_data["weather"][0]["description"]
                    weather_description_ru = self.weather_mapping.get(weather_description_en, weather_description_en)
                    temp = weather_data["main"]["temp"]
                    feels_like = weather_data["main"]["feels_like"]
                    humidity = weather_data["main"]["humidity"]
                    pressure = weather_data["main"]["pressure"]
                    wind_speed = weather_data["wind"]["speed"]

                    weather_info = (f'üå§Ô∏è –ü–æ–≥–æ–¥–∞: {weather_description_ru}\n'
                                    f'üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n'
                                    f'ü§≤ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n'
                                    f'üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n'
                                    f'üéà –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–±–∞—Ä\n'
                                    f'üçÉ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å')
                    return weather_info
        return None

    # —Å–∫–∞–Ω
    def send_weather(self, chat_id, city):
        weather_info = self.get_weather_for_date(city, datetime.datetime.now())
        if weather_info:
            self.bot.send_message(chat_id, weather_info, reply_markup=self.markup)
        else:
            self.bot.send_message(chat_id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}... ü•∫')

    # —Ç–∞–π–º–µ—Ä –Ω–∞ —á–∞—Å
    def send_weather_periodically(self, chat_id):
        while self.sending_weather:
            if self.last_city:
                self.send_weather(chat_id, self.last_city)
            time.sleep(3600)

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    def start_bot(self):
        self.bot.polling(none_stop=True)


if __name__ == "__main__":
    token = '5946513884:AAGkl2MPaJ5sK0BRYsbWkY6PV23JJBF1-aU'
    api_key = '709e3cbe105d05f7bfdb27403929d3bc'
    bot = WeatherBot(token, api_key)
    bot.start_bot()
